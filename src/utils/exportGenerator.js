const PDFDocument = require('pdfkit');
const { Parser } = require('json2csv');
const fs = require('fs-extra');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const TEMP_DIR = path.join(__dirname, '..', 'temp');
fs.ensureDirSync(TEMP_DIR);

const formatCurrency = amount => `â‚¹${amount.toLocaleString('en-IN')}`;
const formatDate = dateString =>
  new Date(dateString).toLocaleDateString('en-IN');
const formatTime = timeString => {
  if (!timeString) return '';
  const [hour, minute] = timeString.split(':');
  return `${parseInt(hour, 10) % 12 || 12}:${minute} ${
    parseInt(hour, 10) >= 12 ? 'PM' : 'AM'
  }`;
};

const generatePdf = data => {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ margin: 30, size: 'A4' });
    const filePath = path.join(TEMP_DIR, `${uuidv4()}.pdf`);
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    // Title
    doc.fontSize(20).text(data.reportInfo.title, { align: 'center' });
    doc.moveDown();

    // Report Info
    doc.fontSize(10).text(`Generated by: ${data.reportInfo.generatedBy}`);
    doc.text(
      `Date Range: ${formatDate(
        data.reportInfo.dateRange.startDate,
      )} to ${formatDate(data.reportInfo.dateRange.endDate)}`,
    );
    doc.moveDown();

    // Summary
    doc.fontSize(16).text('Summary', { underline: true });
    doc.fontSize(12).text(`Total Entries: ${data.summary.totalEntries}`);
    doc.text(`Total Sales: ${formatCurrency(data.summary.totalSales)}`);
    doc.text(`Total Raw Stone: ${formatCurrency(data.summary.totalRawStone)}`);
    doc.moveDown();

    // Entries Table
    doc.fontSize(16).text('Entries', { underline: true });
    const tableTop = doc.y;
    const itemX = 50;
    const qtyX = 200;
    const rateX = 300;
    const amountX = 400;

    doc.fontSize(10).text('Date', itemX, tableTop);
    doc.text('Truck No.', qtyX, tableTop);
    doc.text('Material', rateX, tableTop);
    doc.text('Total Amount', amountX, tableTop);

    let y = tableTop + 25;
    data.entries.forEach(entry => {
      doc.fontSize(10).text(formatDate(entry.date), itemX, y);
      doc.text(entry.truckNumber, qtyX, y);
      doc.text(entry.materialType, rateX, y);
      doc.text(formatCurrency(entry.totalAmount), amountX, y);
      y += 20;
    });

    doc.end();
    stream.on('finish', () => resolve(path.basename(filePath)));
    stream.on('error', reject);
  });
};

const generateCsv = data => {
  const fields = [
    'date',
    'truckNumber',
    'entryType',
    'materialType',
    'units',
    'ratePerUnit',
    'totalAmount',
  ];
  const json2csvParser = new Parser({ fields });
  const csv = json2csvParser.parse(data.entries);
  const filePath = path.join(TEMP_DIR, `${uuidv4()}.csv`);
  return fs.writeFile(filePath, csv).then(() => path.basename(filePath));
};

module.exports = {
  generatePdf,
  generateCsv,
};
